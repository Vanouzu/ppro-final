// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package uhk.vanouzu1.repository;

import com.querydsl.core.types.Path;
import com.querydsl.core.types.Projections;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import uhk.vanouzu1.model.Mistnost;
import uhk.vanouzu1.model.MistnostInfo;
import uhk.vanouzu1.model.QMistnost;
import uhk.vanouzu1.repository.MistnostRepositoryCustom;
import uhk.vanouzu1.repository.MistnostRepositoryImpl;

privileged aspect MistnostRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: MistnostRepositoryImpl implements MistnostRepositoryCustom;
    
    declare @type: MistnostRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MistnostRepositoryImpl.NAZEV = "nazev";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MistnostRepositoryImpl.KAPACITA = "kapacita";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MistnostRepositoryImpl.AVG___OBSAZENOST = "avg_obsazenost";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MistnostRepositoryImpl.ID = "id";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<MistnostInfo> MistnostRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QMistnost mistnost = QMistnost.mistnost;
        
        JPQLQuery<Mistnost> query = from(mistnost);
        
        Path<?>[] paths = new Path<?>[] {mistnost.id,mistnost.nazev,mistnost.kapacita,mistnost.avg_obsazenost};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ID, mistnost.id)
			.map(NAZEV, mistnost.nazev)
			.map(KAPACITA, mistnost.kapacita)
			.map(AVG___OBSAZENOST, mistnost.avg_obsazenost);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, Projections.constructor(MistnostInfo.class, mistnost.id, mistnost.nazev, mistnost.kapacita, mistnost.avg_obsazenost ));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<MistnostInfo> MistnostRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QMistnost mistnost = QMistnost.mistnost;
        
        JPQLQuery<Mistnost> query = from(mistnost);
        
        Path<?>[] paths = new Path<?>[] {mistnost.id,mistnost.nazev,mistnost.kapacita,mistnost.avg_obsazenost};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(mistnost.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ID, mistnost.id)
			.map(NAZEV, mistnost.nazev)
			.map(KAPACITA, mistnost.kapacita)
			.map(AVG___OBSAZENOST, mistnost.avg_obsazenost);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, Projections.constructor(MistnostInfo.class, mistnost.id, mistnost.nazev, mistnost.kapacita, mistnost.avg_obsazenost ));
    }
    
}
